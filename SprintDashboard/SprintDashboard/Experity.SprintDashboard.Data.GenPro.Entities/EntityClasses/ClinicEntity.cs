//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.5.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////

using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using Experity.SprintDashboard.Data.GenPro.Entities.FactoryClasses;
using Experity.SprintDashboard.Data.GenPro.Entities.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Experity.SprintDashboard.Data.GenPro.Entities.EntityClasses
{
    // __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
    // __LLBLGENPRO_USER_CODE_REGION_END

    /// <summary>Entity class which represents the entity 'Clinic'.<br/><br/></summary>
    [Serializable]
    public partial class ClinicEntity : CommonEntityBase
    // __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
    // __LLBLGENPRO_USER_CODE_REGION_END

    {
        private PracticeEntity _practice;
        // __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
        // __LLBLGENPRO_USER_CODE_REGION_END

        private static ClinicEntityStaticMetaData _staticMetaData = new ClinicEntityStaticMetaData();
        private static ClinicRelations _relationsFactory = new ClinicRelations();

        /// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
        public static partial class MemberNames
        {
            /// <summary>Member name Practice</summary>
            public static readonly string Practice = "Practice";
            /// <summary>Member name Conversations</summary>
            public static readonly string Conversations = "Conversations";
            /// <summary>Member name LogDetails</summary>
            public static readonly string LogDetails = "LogDetails";
        }

        /// <summary>Static meta-data storage for navigator related information</summary>
        protected class ClinicEntityStaticMetaData : EntityStaticMetaDataBase
        {
            public ClinicEntityStaticMetaData()
            {
                SetEntityCoreInfo("ClinicEntity", InheritanceHierarchyType.None, false, (int)EntityType.ClinicEntity, typeof(ClinicEntity), typeof(ClinicEntityFactory), false);
                AddNavigatorMetaData<ClinicEntity, PracticeEntity>("Practice", "Clinics", (a, b) => a._practice = b, a => a._practice, (a, b) => a.Practice = b, StaticClinicRelations.PracticeEntityUsingPracticePkStatic, () => new ClinicRelations().PracticeEntityUsingPracticePk, null, new int[] { (int)ClinicFieldIndex.PracticePk }, null, true, (int)EntityType.PracticeEntity);
            }
        }

        /// <summary>Static ctor</summary>
        static ClinicEntity()
        {
        }

        /// <summary> CTor</summary>
        public ClinicEntity()
        {
            InitClassEmpty(null, null);
        }

        /// <summary> CTor</summary>
        /// <param name="fields">Fields object to set as the fields for this entity.</param>
        public ClinicEntity(IEntityFields2 fields)
        {
            InitClassEmpty(null, fields);
        }

        /// <summary> CTor</summary>
        /// <param name="validator">The custom validator object for this ClinicEntity</param>
        public ClinicEntity(IValidator validator)
        {
            InitClassEmpty(validator, null);
        }

        /// <summary> CTor</summary>
        /// <param name="clinicPk">PK value for Clinic which data should be fetched into this Clinic object</param>
        public ClinicEntity(System.Guid clinicPk) : this(clinicPk, null)
        {
        }

        /// <summary> CTor</summary>
        /// <param name="clinicPk">PK value for Clinic which data should be fetched into this Clinic object</param>
        /// <param name="validator">The custom validator object for this ClinicEntity</param>
        public ClinicEntity(System.Guid clinicPk, IValidator validator)
        {
            InitClassEmpty(validator, null);
            this.ClinicPk = clinicPk;
        }

        /// <summary>Private CTor for deserialization</summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        protected ClinicEntity(SerializationInfo info, StreamingContext context) : base(info, context)
        {
            // __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
            // __LLBLGENPRO_USER_CODE_REGION_END
        }

        /// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Conversation' to this entity.</summary>
        /// <returns></returns>
        public virtual IRelationPredicateBucket GetRelationInfoConversations() { return CreateRelationInfoForNavigator("Conversations"); }

        /// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'LogDetail' to this entity.</summary>
        /// <returns></returns>
        public virtual IRelationPredicateBucket GetRelationInfoLogDetails() { return CreateRelationInfoForNavigator("LogDetails"); }

        /// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Practice' to this entity.</summary>
        /// <returns></returns>
        public virtual IRelationPredicateBucket GetRelationInfoPractice() { return CreateRelationInfoForNavigator("Practice"); }

        /// <inheritdoc/>
        protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }

        /// <summary>Initializes the class members</summary>
        private void InitClassMembers()
        {
            PerformDependencyInjection();
            // __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
            // __LLBLGENPRO_USER_CODE_REGION_END

            OnInitClassMembersComplete();
        }

        /// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
        /// <param name="validator">The validator object for this ClinicEntity</param>
        /// <param name="fields">Fields of this entity</param>
        private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
        {
            OnInitializing();
            this.Fields = fields ?? CreateFields();
            this.Validator = validator;
            InitClassMembers();
            // __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
            // __LLBLGENPRO_USER_CODE_REGION_END


            OnInitialized();
        }

        /// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
        public static ClinicRelations Relations { get { return _relationsFactory; } }

        /// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Practice' for this entity.</summary>
        /// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
        public static IPrefetchPathElement2 PrefetchPathPractice { get { return _staticMetaData.GetPrefetchPathElement("Practice", CommonEntityBase.CreateEntityCollection<PracticeEntity>()); } }

        /// <summary>The ClinicPk property of the Entity Clinic<br/><br/></summary>
        /// <remarks>Mapped on  table field: "Clinic"."ClinicPk".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
        public virtual System.Guid ClinicPk
        {
            get { return (System.Guid)GetValue((int)ClinicFieldIndex.ClinicPk, true); }
            set { SetValue((int)ClinicFieldIndex.ClinicPk, value); }
        }

        /// <summary>The Name property of the Entity Clinic<br/><br/></summary>
        /// <remarks>Mapped on  table field: "Clinic"."Name".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
        public virtual System.String Name
        {
            get { return (System.String)GetValue((int)ClinicFieldIndex.Name, true); }
            set { SetValue((int)ClinicFieldIndex.Name, value); }
        }

        /// <summary>The PracticePk property of the Entity Clinic<br/><br/></summary>
        /// <remarks>Mapped on  table field: "Clinic"."PracticePk".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
        public virtual System.Guid PracticePk
        {
            get { return (System.Guid)GetValue((int)ClinicFieldIndex.PracticePk, true); }
            set { SetValue((int)ClinicFieldIndex.PracticePk, value); }
        }

        /// <summary>The UtcOffset property of the Entity Clinic<br/><br/></summary>
        /// <remarks>Mapped on  table field: "Clinic"."UtcOffset".<br/>Table field type characteristics (type, precision, scale, length): SmallInt, 5, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
        public virtual System.Int16 UtcOffset
        {
            get { return (System.Int16)GetValue((int)ClinicFieldIndex.UtcOffset, true); }
            set { SetValue((int)ClinicFieldIndex.UtcOffset, value); }
        }

        /// <summary>Gets / sets related entity of type 'PracticeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
        [Browsable(false)]
        public virtual PracticeEntity Practice
        {
            get { return _practice; }
            set { SetSingleRelatedEntityNavigator(value, "Practice"); }
        }
        // __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
        // __LLBLGENPRO_USER_CODE_REGION_END


    }

    public enum ClinicFieldIndex
    {
        ///<summary>ClinicPk. </summary>
        ClinicPk,
        ///<summary>Name. </summary>
        Name,
        ///<summary>PracticePk. </summary>
        PracticePk,
        ///<summary>UtcOffset. </summary>
        UtcOffset,
        /// <summary></summary>
        AmountOfFields
    }

    /// <summary>Implements the relations factory for the entity: Clinic. </summary>
    public partial class ClinicRelations : RelationFactory
    {
        /// <summary>Returns a new IEntityRelation object, between ClinicEntity and ConversationEntity over the 1:n relation they have, using the relation between the fields: Clinic.ClinicPk - Conversation.ClinicPk</summary>
        public virtual IEntityRelation PracticeEntityUsingPracticePk
        {
            get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Practice", false, new[] { PracticeFields.PracticePk, ClinicFields.PracticePk }); }
        }

    }

    /// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
    internal static class StaticClinicRelations
    {
        internal static readonly IEntityRelation PracticeEntityUsingPracticePkStatic = new ClinicRelations().PracticeEntityUsingPracticePk;

        /// <summary>CTor</summary>
        static StaticClinicRelations() { }
    }
}